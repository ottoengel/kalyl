generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER") // Campo para indicar o papel do usu√°rio
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  block         Block[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

//em cima 

model Barber {
  id        String           @id @default(uuid())
  name      String
  phones    String[]
  imageUrl  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  services  BarberServices[]
}

model BarberServices {
  id          String    @id @default(uuid())
  name        String
  description String
  imageUrl    String
  price       Decimal   @db.Decimal(10, 2)
  barberId    String
  barber      Barber    @relation(fields: [barberId], references: [id])
  bookings    Booking[] 
}

model Booking {
  id        String         @id @default(uuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  serviceId String
  service   BarberServices @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  date      DateTime
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  type      String         @default("Reserva")
}

model Block {
  id        String         @id @default(uuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  date      DateTime
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}
